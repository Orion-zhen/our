# File: .github/workflows/reusable-build.yml
name: Reusable AUR Build

on:
  workflow_call:
    inputs:
      package:
        description: The package to build
        required: true
        type: string
      lto:
        description: Enable LTO
        default: true
        type: boolean
      gpg-sign:
        description: Use GPG sign
        default: true
        type: boolean
      clean-build:
        description: Launch a clean build
        default: false
        type: boolean
    secrets:
      GPG_SEC_KEY:
        required: true
      GPG_PASSPHRASE:
        required: true
      GPG_SIG_KEY:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: greyltc/archlinux-aur:yay
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare build environment
        if: ${{ inputs.lto && !inputs.clean-build }}
        run: |
          sed -i '/VerbosePkgLists/d' /etc/pacman.conf
          # cat ./configs/pacman.conf >> /etc/pacman.conf
          cat ./configs/makepkg.conf >> /etc/makepkg.conf
          pacman -Syu --noconfirm --overwrite '*' base-devel git pacman-contrib mold python-pyyaml sudo tree
          sed -i '/E_ROOT/d' /usr/bin/makepkg

      - name: Prepare build environment (No LTO)
        if: ${{ !inputs.lto && !inputs.clean-build }}
        run: |
          sed -i '/VerbosePkgLists/d' /etc/pacman.conf
          # cat ./configs/pacman.conf >> /etc/pacman.conf
          cat ./configs/makepkg-no-lto.conf >> /etc/makepkg.conf
          pacman -Syu --noconfirm --overwrite '*' base-devel git pacman-contrib mold python-pyyaml sudo tree
          sed -i '/E_ROOT/d' /usr/bin/makepkg

      - name: Prepare environment (Clean Build)
        if: ${{ inputs.clean-build }}
        run: |
          sed -i '/VerbosePkgLists/d' /etc/pacman.conf
          # cat ./configs/pacman.conf >> /etc/pacman.conf
          pacman -Syu --noconfirm --overwrite '*' base-devel git pacman-contrib mold python-pyyaml sudo tree
          sed -i '/E_ROOT/d' /usr/bin/makepkg

      - name: Build AUR package
        # 调用脚本，只传递一个包
        run: |
          # bash scripts/build-one.sh ${{ inputs.package }}
          # 来自 docker image
          # 显式指定 CI=true
          CI=true aur-install ${{ inputs.package }}

      - name: Gather Build Results
        run: |
          # /var/cache/foreign-pkg 是 aur-install 放置构建的包的地方
          find /var/cache/foreign-pkg -maxdepth 1 -name "*.pkg.tar.zst*" -exec mv {} "./" \;

          # 检查是否真的有包被移动了过来
          # `ls` 的结果通过 `wc -l` 计数，如果不为 0，说明成功了
          if [ $(ls -1 ${REPO}*.pkg.tar.zst 2>/dev/null | wc -l) -eq 0 ]; then
              echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
              echo "!!! Critical Error: Build for '$REPO' did not produce any package files."
              echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
              exit 1
          fi

          echo "================================================="
          echo "All packages built successfully!"
          echo "Final packages in current directory:"
          ls -l *.pkg.tar.zst*
          echo "================================================="

      - name: Rename files with illegal characters
        run: |
          find . -maxdepth 1 -type f -name '*:*' | while IFS= read -r file; do mv "$file" "${file//:/_}"; done

      - name: Import GPG key
        if: ${{ inputs.gpg-sign }}
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_SEC_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: GPG Sign Packages
        env:
          GPG_SIG_KEY: ${{ secrets.GPG_SIG_KEY }}
        if: ${{ inputs.gpg-sign }}
        run: |
          for pkg in *.zst; do
            echo "signing $pkg..."
            gpg --local-user $GPG_SIG_KEY --detach-sign "$pkg"
          done

          echo "Every package is signed"
      
      - name: Upload built package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.package }} # 使用包名作为构件名，更清晰
          path: |
            *.zst*
