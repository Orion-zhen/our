# File: .github/workflows/reusable-build.yml
name: Reusable AUR Build

on:
  workflow_call:
    inputs:
      package:
        description: 'The package to build'
        required: true
        type: string
      lto:
        description: "Enable LTO"
        default: true
        type: boolean
      download-artifacts:
        description: 'Whether to download artifacts from previous jobs'
        required: true
        type: boolean
    secrets:
      GPG_SEC_KEY:
        required: true
      GPG_PASSPHRASE:
        required: true
      GPG_SIG_KEY:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    container: "archlinux:latest"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_SEC_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Prepare build environment
        if: ${{ inputs.lto }}
        run: |
          sed -i '/VerbosePkgLists/d' /etc/pacman.conf
          # cat ./configs/pacman.conf >> /etc/pacman.conf
          cat ./configs/makepkg.conf >> /etc/makepkg.conf
          pacman -Syu --noconfirm --overwrite '*' base-devel git pacman-contrib mold openmp openmpi tree
          sed -i '/E_ROOT/d' /usr/bin/makepkg

      - name: Prepare build environment (No LTO)
        if: ${{ !inputs.lto }}
        run: |
          sed -i '/VerbosePkgLists/d' /etc/pacman.conf
          # cat ./configs/pacman.conf >> /etc/pacman.conf
          cat ./configs/makepkg-no-lto.conf >> /etc/makepkg.conf
          pacman -Syu --noconfirm --overwrite '*' base-devel git pacman-contrib mold openmp openmpi tree
          sed -i '/E_ROOT/d' /usr/bin/makepkg
      
      - name: Download previously built dependencies
        if: ${{ inputs.download-artifacts }}
        id: download-deps
        uses: actions/download-artifact@v4
        with:
          path: x86_64
          merge-multiple: true

      - name: Setup local repo for dependencies
        if: ${{ inputs.download-artifacts && steps.download-deps.outputs.download-path }}
        env:
          GPG_SIG_KEY: ${{ secrets.GPG_SIG_KEY }}
        run: |
          echo "--- Setting up local repo with downloaded packages ---"
          bash scripts/repo-add.sh our-tmp
          echo "[our-tmp]" >> /etc/pacman.conf
          echo "SigLevel = Optional TrustAll" >> /etc/pacman.conf
          echo "Server = file://$(pwd)/x86_64" >> /etc/pacman.conf
          pacman -Syu --noconfirm --overwrite '*'

      - name: Build AUR package
        env:
          GPG_SIG_KEY: ${{ secrets.GPG_SIG_KEY }}
        # 调用脚本，只传递一个包
        run: |
          bash scripts/build-one.sh ${{ inputs.package }}

      - name: Rename files with illegal characters
        run: |
          find . -maxdepth 1 -type f -name '*:*' | while IFS= read -r file; do mv "$file" "${file//:/_}"; done
      
      - name: Upload built package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.package }} # 使用包名作为构件名，更清晰
          path: |
            *.zst*