name: OUR Publish

on:
  schedule:
    - cron: "0 0 * * 1"
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/our.yml"
      - ".github/workflows/reusable-build.yml"
      - "scripts/**"
      - "configs/**"

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set_matrix.outputs.packages }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        run: |
          apt update -y
          apt install -y python3 python3-pip
          pip install --no-cache-dir --break-system-packages pyyaml

      - name: Generate package list
        id: set_matrix
        run: |
          PACKAGE_LIST=$(python3 scripts/list-tasks.py packages.yaml --lto)

          if [[ "$PACKAGE_LIST" == "[]" ]]; then
            echo "::notice::No packages found in '${{ env.PACKAGE_ROOT }}'. Workflow will end gracefully."
          else
            echo "Discovered packages: $PACKAGE_LIST"
          fi
          echo "packages=$PACKAGE_LIST" >> $GITHUB_OUTPUT

  generate-matrix-no-lto:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set_matrix.outputs.packages }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        run: |
          apt update -y
          apt install -y python3 python3-pip
          pip install --no-cache-dir --break-system-packages pyyaml

      - name: Generate package list
        id: set_matrix
        run: |
          PACKAGE_LIST=$(python3 scripts/list-tasks.py packages.yaml --no-lto)

          if [[ "$PACKAGE_LIST" == "[]" ]]; then
            echo "::notice::No packages found in '${{ env.PACKAGE_ROOT }}'. Workflow will end gracefully."
          else
            echo "Discovered packages: $PACKAGE_LIST"
          fi
          echo "packages=$PACKAGE_LIST" >> $GITHUB_OUTPUT

  build:
    needs: generate-matrix
    if: ${{ needs.generate-matrix.outputs.packages != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.generate-matrix.outputs.packages) }}
    uses: ./.github/workflows/reusable-build.yml
    permissions:
      contents: write
    with:
      package: ${{ matrix.package }}
      lto: true
      download-artifacts: false
    secrets: inherit

  build-no-lto:
    needs: generate-matrix-no-lto
    if: ${{ needs.generate-matrix-no-lto.outputs.packages != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.generate-matrix-no-lto.outputs.packages) }}
    uses: ./.github/workflows/reusable-build.yml
    permissions:
      contents: write
    with:
      package: ${{ matrix.package }}
      lto: false
      download-artifacts: false
    secrets: inherit

  #####################################################################
  # FINAL STAGE: Aggregate all packages, build repo, and publish.
  #####################################################################
  publish:
    name: Publish to Pages
    needs: # This transitively depends on all previous stages
      - build
      - build-no-lto
    runs-on: ubuntu-latest
    container: "archlinux:latest"
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_SEC_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      
      - name: Download all built packages
        uses: actions/download-artifact@v4
        with:
          path: x86_64
          merge-multiple: true

      - name: Display downloaded files
        run: |
          echo "--- All built packages ---"
          ls -R x86_64

      - name: Generate repository database
        env:
          GPG_SIG_KEY: ${{ secrets.GPG_SIG_KEY }}
        run: bash scripts/repo-add.sh our

      - name: Generate package index page
        run: |
          pacman -Syu python python-pip --noconfirm --overwrite '*'
          pip install zstandard --break-system-packages
          python scripts/packages.py

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "."

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # publish-to-hf:
  #   name: Publish to Hugging Face
  #   needs: # This transitively depends on all previous stages
  #     - standalone
  #     - standalone-no-lto
  #     - stage-5
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download all built packages
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: .
  #         merge-multiple: true

  #     - name: Release to Hugging Face
  #       env:
  #         HF_TOKEN: ${{ secrets.HF_TOKEN }}
  #       run: |
  #         pip install -U "huggingface_hub[cli]"
  #         huggingface-cli upload --repo-type model Orion-zhen/our . . --commit-message "Publish latest packages"
