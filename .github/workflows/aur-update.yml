name: Update AUR Packages

on:
  schedule:
    - cron: 0 0 * * 1
  push:
    branches:
      - main
    paths:
      - ourpkg/**
  workflow_dispatch:
    inputs:
      force-push:
        description: Force push to AUR
        default: false
        type: boolean

env:
  PACKAGE_ROOT: ourpkg

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set_matrix.outputs.packages }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate package list
        id: set_matrix
        working-directory: ${{ env.PACKAGE_ROOT }}
        run: |
          # 使用find命令安全地查找一级子目录, 并转换为JSON数组
          # -mindepth 1: 避免匹配到'.'当前目录
          # -maxdepth 1: 限制只查找一级深度
          # -type d: 只查找目录
          # -printf '%f\n': 只打印目录的基础名称（不带'./'前缀），并用换行符分隔
          PACKAGE_LIST=$(find . -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | jq -R . | jq -cs .)

          if [[ "$PACKAGE_LIST" == "[]" ]]; then
            echo "::notice::No packages found in '${{ env.PACKAGE_ROOT }}'. Workflow will end gracefully."
          else
            echo "Discovered packages: $PACKAGE_LIST"
          fi
          echo "packages=$PACKAGE_LIST" >> $GITHUB_OUTPUT


  update-and-sync:
    needs: generate-matrix
    if: ${{ needs.generate-matrix.outputs.packages != '[]' }}
    runs-on: ubuntu-latest
    container: archlinux:latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.generate-matrix.outputs.packages) }}

    steps:
      - name: Set up Arch Linux Environment
        run: |
          pacman -Syu --noconfirm --overwrite '*' git github-cli base-devel jq pacman-contrib nvchecker devtools
          sed -i '/E_ROOT/d' /usr/bin/makepkg

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update PKGBUILD
        working-directory: ${{ env.PACKAGE_ROOT }}/${{ matrix.package }}
        run: |
          if [[ -f ".nvchecker.toml" ]]; then
            echo "--> Found .nvchecker.toml in ${{ matrix.package }}, using 'pkgctl version upgrade'."
            # pkgctl 和 nvchecker 配合
            pkgctl version upgrade
          else
            echo "--> Running 'makepkg' in ${{ matrix.package }}"
            # 使用makepkg通过pkgver()函数更新版本号
            makepkg --nobuild --nodeps
          fi

      - name: Check for PKGBUILD changes
        id: check_changes
        working-directory: ${{ env.PACKAGE_ROOT }}/${{ matrix.package }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGE_PATH: ${{ env.PACKAGE_ROOT }}/${{ matrix.package }}
        run: |
          echo "--> Comparing SHA hash for ${{ matrix.package }}..."

          # 1. 使用 git hash-object 计算本地 PKGBUILD 的SHA哈希值
          LOCAL_SHA=$(git hash-object PKGBUILD)
          echo "  - Local  file SHA: ${LOCAL_SHA}"

          # 2. 从GitHub API获取远程文件的SHA哈希值
          REMOTE_SHA=$(gh api "repos/${{ github.repository }}/contents/${{ env.PACKAGE_PATH }}/PKGBUILD" --jq .sha || echo "null")
          echo "  - Remote file SHA: ${REMOTE_SHA}"

          # 3. 比较两个哈希值
          if [[ "${LOCAL_SHA}" != "${REMOTE_SHA}" ]]; then
            echo "  - SHAs do not match. Change detected."
            echo "push_to_github=true" >> $GITHUB_OUTPUT
          else
            echo "  - SHAs match. No changes detected. Sync will be skipped."
          fi

          # 4. 检查 AUR 上的 PKGBUILD
          if git clone https://aur.archlinux.org/${{ matrix.package }}.git aur-tmp &>/dev/null; then
            # 如果成功克隆
            if [[ -f aur-tmp/PKGBUILD ]]; then
              # 如果存在 PKGBUILD 文件, 则检查 sha
              AUR_SHA=$(git hash-object aur-tmp/PKGBUILD)
              echo "  - AUR file SHA: ${AUR_SHA}"
              if [[ "${LOCAL_SHA}" != "${AUR_SHA}" ]]; then
                echo "  - SHAs do not match. Change detected."
                echo "publish_to_aur=true" >> $GITHUB_OUTPUT
              else
                echo "  - SHAs match. No changes detected. Publish will be skipped."
              fi
            else
              # 一般来说, 如果 AUR 上不存在软件包, 克隆下来的是个空仓库
              echo "  - Empty AUR repository."
              echo "publish_to_aur=true" >> $GITHUB_OUTPUT
            fi
            rm -rf aur-tmp
          else
            echo "  - Package does not exist on AUR yet."
            echo "publish_to_aur=true" >> $GITHUB_OUTPUT
          fi

      - name: Get version info
        id: get_version_info
        if: ${{ steps.check_changes.outputs.push_to_github || steps.check_changes.outputs.publish_to_aur }}
        working-directory: ${{ env.PACKAGE_ROOT }}/${{ matrix.package }}
        run: |
          # 从更新后的PKGBUILD中提取版本和发布号
          PKGNAME=$(grep -m1 '^pkgname=' PKGBUILD | cut -d'=' -f2)
          NEW_VERSION=$(grep -m1 '^pkgver=' PKGBUILD | cut -d'=' -f2)
          NEW_PKGREL=$(grep -m1 '^pkgrel=' PKGBUILD | cut -d'=' -f2)
          COMMIT_MSG=":bookmark: Bump ${PKGNAME} version to ${NEW_VERSION}-${NEW_PKGREL}"
          echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "--> Generated commit message: ${COMMIT_MSG}"

      - name: Sync changes to GitHub
        id: sync_to_github
        if: ${{ steps.check_changes.outputs.push_to_github }}
        working-directory: ${{ env.PACKAGE_ROOT }}/${{ matrix.package }}
        env:
          # GITHUB_TOKEN是Actions自动提供的，用于gh命令的认证
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGE_PATH: ${{ env.PACKAGE_ROOT }}/${{ matrix.package }}
        run: |
          echo "1/3: 获取远程SHA..."
          REMOTE_SHA=$(gh api "repos/${{ github.repository }}/contents/${{ env.PACKAGE_PATH }}/PKGBUILD" --jq .sha || echo "null")
          if [[ "$REMOTE_SHA" == "null" ]]; then
              echo "  - 远程文件不存在，将进行创建操作。"
          else
              echo "  - 成功获取SHA: ${REMOTE_SHA:0:12}..."
          fi

          echo "2/3: Base64编码本地文件..."
          LOCAL_CONTENT_B64=$(base64 -w0 "PKGBUILD")

          echo "3/3: 推送更新到GitHub..."
          REQUEST_BODY="{\"message\": \"${{ steps.get_version_info.outputs.commit_msg }}\", \"content\": \"$LOCAL_CONTENT_B64\""
          if [[ "$REMOTE_SHA" != "null" ]]; then
              REQUEST_BODY="$REQUEST_BODY, \"sha\": \"$REMOTE_SHA\""
          fi
          REQUEST_BODY="$REQUEST_BODY}"

          gh api --method PUT "repos/${{ github.repository }}/contents/${{ env.PACKAGE_PATH }}/PKGBUILD" \
            --input - <<< "$REQUEST_BODY" > /dev/null

          echo "  - '${{ env.PACKAGE_PATH }}/PKGBUILD' 同步成功!"

      - name: Publish to AUR
        if: ${{ inputs.force-push || steps.check_changes.outputs.publish_to_aur }}
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        with:
          pkgname: ${{ matrix.package }}
          pkgbuild: ${{ env.PACKAGE_ROOT }}/${{ matrix.package }}/PKGBUILD
          commit_username: Orion
          commit_email: github-action-bot@no-reply.com
          commit_message: ${{ steps.get_version_info.outputs.commit_msg || 'Force Update' }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
